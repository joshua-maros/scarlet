Void::void
defining{
    TYPE is builtin_item{TYPE}

    Integer32 is builtin_item{Integer32}
    defining{
        sum is builtin_item{i32_sum left right}
        defining{
            left is any{Integer32}
            right is any{Integer32}
        }

        difference is builtin_item{i32_difference left right}
        defining{
            left is any{Integer32}
            right is any{Integer32}
        }
    }

    Boolean is builtin_item{Boolean}
    defining{
        true is builtin_item{true}
        false is builtin_item{false}
    }

    variant Never :TYPE

    variant Void :TYPE
    defining{
        variant void :Void
    }

    variant ProofEqual :TYPE From{Data left right}
    defining{
        Data is any{TYPE}
        left is any{Data}
        right is any{Data}

        variant reflexive :ProofEqual[Data value value]
        defining{
            value is any{Data}
        }

        reinterpret is 
        any{
            Type[Data right]
            From{this Type any{Type[Data left]}}
        }
        defining{
            this is any{ProofEqual}
            Type is any{TYPE From{any{Data}}}
        }
    }

    are_same_variant is builtin_item{are_same_variant a b}
    defining{
        Data is any{TYPE}
        a is any{Data}
        b is any{Data}
    }
}