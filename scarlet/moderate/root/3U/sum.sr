defining{
    x is any{3U}
    x0 is any{Bit}
    x1 is any{Bit}
    x2 is any{Bit}

    y is any{3U}
    y0 is any{Bit}
    y1 is any{Bit}
    y2 is any{Bit}

    a is any{Bit}
    b is any{Bit}
    c is any{Bit}

    half_sum_x is
    Bit::xor[a b]

    half_sum_c is
    Bit::and[a b]

    full_sum_x is
    half_sum_x[half_sum_x c]

    full_sum_c is
    Bit::or[half_sum_c half_sum_c[half_sum_x c]]
}
x matching{ 
    on{3U::new[x2 x1 x0]} 
    y matching{
        on{3U::new[y2 y1 y0]}
        defining{
            sx0 is half_sum_x[x0 y0]
            sc0 is half_sum_c[x0 y0]
            sx1 is full_sum_x[x1 y1 sc0]
            sc1 is full_sum_c[x1 y1 sc0]
            sx2 is full_sum_x[x2 y2 sc1]
            sc2 is full_sum_c[x2 y2 sc1]
        }
        3U::new[sx2 sx1 sx0]
    }
}