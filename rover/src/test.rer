
TYPE
defining{
   TYPE is rover::lang::TYPE
   Integer32 is rover::lang::Integer32
   Boolean is rover::lang::Boolean
   true is Boolean::true

   Data is any{TYPE}
   left is any{Data}
   right is any{Data}

   condition is any{Boolean}
   variant TruthProof :TYPE From{condition}
   defining{
      variant trivial :TruthProof[true]
   }

   TruthProof::trivial info{}

   # other info{}

   # T is any{TYPE}
   # val is any{T}

   # Unit is Type{
   #    param Data is any{TYPE}
   #    param value is any{Data}
   #    variant new :Self
   # }

   # MyType is Unit[Integer32 123]

   # value is MyType::new info{}
}


# Thing is Type{
#    param something is any{Integer32}
#    variant new :Self From{something is any{Integer32}}
# }

# Thing info{}
# Thing::new::something info{}

#=
recount is 
pick{
   if input == 0, 0
   else           recount[input - 1]
}
where{
   input is any{Integer32}
}
=#
